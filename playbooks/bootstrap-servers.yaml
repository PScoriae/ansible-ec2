- name: Setup 2GB swapfile for all servers
  hosts: all
  become: true
  vars:
    swap_file_path: /swapfile
    swap_file_size_mb: 2000
  tasks:
    - name: Create swap file
      command:
        dd if=/dev/zero of={{ swap_file_path }} bs=1M count={{ swap_file_size_mb }}
        creates="{{ swap_file_path }}"
      tags:
        - swap.file.create

    - name: Change swap file permissions
      file: path="{{ swap_file_path }}"
        owner=root
        group=root
        mode=0600
      tags:
        - swap.file.permissions

    - name: "Check swap file type"
      command: file {{ swap_file_path }}
      register: swapfile
      tags:
        - swap.file.mkswap
      changed_when: false

    - name: Make swap file
      command: "mkswap {{ swap_file_path }}"
      when: swapfile.stdout.find('swap file') == -1
      tags:
        - swap.file.mkswap

    - name: Write swap entry in fstab
      ansible.posix.mount: name=none
        src={{ swap_file_path }}
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      tags:
        - swap.fstab

    - name: Mount swap
      command: "swapon {{ swap_file_path }}"
      when: ansible_swaptotal_mb < 1
      tags:
        - swap.file.swapon

- name: Bootstrap packages for all servers
  hosts: all
  become: true
  tasks:
    # - name: Enable nginx in amazon-linux-extras
    #   command: amazon-linux-extras enable nginx1
    #   args:
    #     creates: /etc/nginx
    - name: Install list of packages
      yum:
        name:
          - nginx
          - docker
          - git
          - nodejs
          - jenkins
        state: present
    - name: Install necessary python packages
      pip:
        name:
          - requests
          - docker
      # vars:
      #   ansible_python_interpreter: /usr/bin/python3.7
    # - name: Install docker-compose
    #   ansible.builtin.get_url:
    #     url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64
    #     dest: /usr/local/bin/docker-compose
    #     mode: "555"
    # - name: Make symbolic link for docker-compose
    #   command: sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    #   changed_when: false
    - name: Enable and start docker service
      systemd:
        name: docker
        enabled: true
        state: started

- name: Create volume for MongoDB for all servers
  hosts: all
  become: true
  tasks:
    - name: Make empty directory
      ansible.builtin.file:
        path: /home/ec2-user/PCPartsTool-volume
        state: directory
        mode: "777"

- name: Add CICD server Docker insecure registry
  hosts: all
  become: true
  tasks:
    - name: Copy file over
      ansible.builtin.copy:
        src: ../config-files/daemon.json
        dest: /etc/docker/daemon.json
        mode: "444"

- name: Copy .pem key over to CICD server
  hosts: cicd
  become: true
  tasks:
    - name: Copy config file over
      ansible.builtin.copy:
        src: ../config-files/ssh-config
        dest: ~/.ssh/config
        mode: "444"
    - name: Copy key over
      ansible.builtin.copy:
        src: ../config-files/main-key.pem
        dest: ~/.ssh/main-key.pem
        mode: "600"

- name: Install pnpm for cicd servers
  hosts: cicd
  become: true
  # vars:
  #   node_install_path: /home/ec2-user/node-install.sh
  tasks:
    # - name: Install c compilers
    #   yum:
    #     name:
    #       - gcc-c++
    #       - make
    #     state: present
    # - name: Get node
    #   ansible.builtin.get_url:
    #     url: https://rpm.nodesource.com/setup_16.x
    #     dest: "{{ node_install_path }}"
    #     mode: "600"
    # - name: Install node
    #   command: bash {{ node_install_path }}
    #   changed_when: false
    # - name: Install node
    #   yum:
    #     name: nodejs
    #     state: present
    - name: Install pnpm
      community.general.npm:
        name: pnpm
        global: true
        state: present

- name: Setup and configure Jenkins
  hosts: cicd
  become: true
  tasks:
    # - name: Add jenkins repo
    #   ansible.builtin.get_url:
    #     url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
    #     dest: /etc/yum.repos.d/jenkins.repo
    #     mode: "777"
    # - name: Import key file from jenkins-ci to make installable
    #   rpm_key:
    #     key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
    #     state: present
    # - name: Install java 11
    #   command: amazon-linux-extras install java-openjdk11 -y
    #   args:
    #     creates: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
    # - name: Install jenkins
    #   yum:
    #     name:
    #       - jenkins
    #     state: present
    - name: Add a line to a file if the file does not exist, without passing regexp
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: "jenkins ALL=(ALL) NOPASSWD: ALL"
        state: present
        mode: "440"
    - name: Enable and start jenkins service
      systemd:
        name: jenkins
        enabled: true
        state: started

- name: Install required libraries for Playwright testing
  hosts: cicd
  become: true
  tasks:
    - name: Install packages
      yum:
        name:
          - libappindicator-gtk3
          - liberation-fonts
        state: present

- name: Install Ansible on CICD servers
  hosts: cicd
  tasks:
    - name: Install Ansible
      pip:
        name:
          - ansible
        extra_args: "--user"
      # vars:
      #   ansible_python_interpreter: /usr/bin/python3.7

- name: Bootstrap Monitoring services on CICD servers
  hosts: cicd
  become: true
  vars:
    prometheus_filepath: /home/ec2-user/monitoring/prometheus.yml
  tasks:
    - name: Create a monitoring directory if it does not exist
      ansible.builtin.file:
        path: /home/ec2-user/monitoring
        state: directory
        mode: "0755"

    - name: Create prometheus.yml
      ansible.builtin.copy:
        src: ../config-files/prometheus.yml
        dest: "{{ prometheus_filepath }}"
        mode: "444"

    - name: Copy docker-compose.yml
      ansible.builtin.copy:
        src: ../config-files/cicd-server/docker-compose.yml
        dest: /home/ec2-user/monitoring/docker-compose.yml
        mode: "777"

    - name: Pull and Deploy latest Docker Images
      community.docker.docker_compose:
        project_src: /home/ec2-user/monitoring
        state: present
        pull: true
        project_name: monitoring

- name: Bootstrap Monitoring services on Web servers
  hosts: web
  become: true
  tasks:
    - name: Create a monitoring directory if it does not exist
      ansible.builtin.file:
        path: /home/ec2-user/monitoring
        state: directory
        mode: "0755"

    - name: Copy docker-compose.yml
      ansible.builtin.copy:
        src: ../config-files/web-server/docker-compose.yml
        dest: /home/ec2-user/monitoring/docker-compose.yml
        mode: "777"

    - name: Pull and Deploy latest Docker Images
      community.docker.docker_compose:
        project_src: /home/ec2-user/monitoring
        state: present
        pull: true
        project_name: monitoring

- name: Setup Docker registry
  hosts: cicd
  become: true
  tasks:
    - name: Run Docker registry
      community.docker.docker_container:
        name: registry
        image: registry:2
        state: started
        pull: true
        restart_policy: always
        ports:
          - "5000:5000"

- name: Configure Nginx Reverse Proxies for Jenkins, Prometheus and Grafana
  hosts: cicd
  become: true
  tasks:
    - name: Set Jenkins Reverse Proxy
      ansible.builtin.copy:
        src: ../config-files/jenkins.conf
        dest: /etc/nginx/conf.d/jenkins.conf
        mode: "400"

    - name: Set Prometheus Reverse Proxy
      ansible.builtin.copy:
        src: ../config-files/prometheus.conf
        dest: /etc/nginx/conf.d/prometheus.conf
        mode: "400"

    - name: Set Grafana Reverse Proxy
      ansible.builtin.copy:
        src: ../config-files/grafana.conf
        dest: /etc/nginx/conf.d/grafana.conf
        mode: "400"

    - name: Enable and start nginx service
      systemd:
        name: nginx
        enabled: true
        state: restarted

- name: Configure Nginx Reverse Proxies for PCPartsTool
  hosts: web
  become: true
  tasks:
    - name: Set PCPartsTool Reverse Proxy
      ansible.builtin.copy:
        src: ../config-files/pcpartstool.conf
        dest: /etc/nginx/conf.d/pcpartstool.conf
        mode: "400"

    - name: Enable and start nginx service
      systemd:
        name: nginx
        enabled: true
        state: restarted
