- name: Setup 2GB swapfile for all servers
  hosts: all
  become: true
  vars:
    swap_file_path: /swapfile
    swap_file_size_mb: 2000
  tasks:
    - name: Create swap file
      command:
        dd if=/dev/zero of={{ swap_file_path }} bs=1M count={{ swap_file_size_mb }}
        creates="{{ swap_file_path }}"
      tags:
        - swap.file.create

    - name: Change swap file permissions
      file: path="{{ swap_file_path }}"
        owner=root
        group=root
        mode=0600
      tags:
        - swap.file.permissions

    - name: "Check swap file type"
      command: file {{ swap_file_path }}
      register: swapfile
      tags:
        - swap.file.mkswap
      changed_when: false

    - name: Make swap file
      command: "mkswap {{ swap_file_path }}"
      when: swapfile.stdout.find('swap file') == -1
      tags:
        - swap.file.mkswap

    - name: Write swap entry in fstab
      ansible.posix.mount: name=none
        src={{ swap_file_path }}
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      tags:
        - swap.fstab

    - name: Mount swap
      command: "swapon {{ swap_file_path }}"
      when: ansible_swaptotal_mb < 1
      tags:
        - swap.file.swapon

- name: Bootstrap yum packages for all servers
  hosts: all
  become: true
  tasks:
    - name: Enable nginx in amazon-linux-extras
      command: amazon-linux-extras enable nginx1
      args:
        creates: /etc/nginx
    - name: Install list of packages
      yum:
        name:
          - python-requests
          - nginx
          - docker
          - git
        state: present
    - name: Enable and start docker service
      systemd:
        name: docker
        enabled: true
        state: started
    - name: Enable and start nginx service
      systemd:
        name: nginx
        enabled: true
        state: started

- name: Install pnpm for cicd servers
  hosts: cicd
  become: true
  tasks:
    - name: Install c compilers
      yum:
        name:
          - gcc-c++
          - make
        state: present
    - name: Get nvm
      ansible.builtin.get_url:
        url: https://rpm.nodesource.com/setup_16.x
        dest: ~/nvm-install.sh
        mode: "600"
    - name: Install nvm
      command: bash ~/nvm-install.sh
      changed_when: false
    - name: Install node
      yum:
        name: nodejs
        state: present
    - name: Install pnpm
      community.general.npm:
        name: pnpm
        global: true
        state: present

- name: Install and setup jenkins on cicd servers
  hosts: cicd
  become: true
  tasks:
    - name: Add jenkins repo
      ansible.builtin.get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo
        mode: "777"
    - name: Import key file from jenkins-ci to make installable
      rpm_key:
        key: https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        state: present
    - name: Install java 11
      command: amazon-linux-extras install java-openjdk11 -y
      args:
        creates: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
    - name: Install jenkins
      yum:
        name:
          - jenkins
        state: present
    - name: Enable and start jenkins service
      systemd:
        name: jenkins
        enabled: true
        state: started

- name: Bootstrap Monitoring services on CICD servers
  hosts: cicd
  become: true
  vars:
    prometheus_filepath: ~/prometheus.yml
  tasks:
    - name: Create empty prometheus.yml
      file:
        path: "{{ prometheus_filepath }}"
        state: touch
        mode: "400"
    - name: Write content to prometheus.yml
      ansible.builtin.blockinfile:
        path: "{{ prometheus_filepath }}"
        marker: # ANSIBLE MANAGED FILE
        block: |
          global:
            scrape_interval:     15s # By default, scrape targets every 15 seconds.

            # Attach these labels to any time series or alerts when communicating with
            # external systems (federation, remote storage, Alertmanager).
            external_labels:
              monitor: 'codelab-monitor'

          # A scrape configuration containing exactly one endpoint to scrape:
          # Here it's Prometheus itself.
          scrape_configs:
            # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
            - job_name: 'prometheus'

              # Override the global default and scrape targets from this job every 5 seconds.
              scrape_interval: 5s

              static_configs:
                - targets: ['localhost:9090']

    - name: Install requests python package
      pip:
        name:
          - requests
          - docker
      vars:
        ansible_python_interpreter: /usr/bin/python3.7

    - name: Start Prometheus Container
      community.docker.docker_container:
        name: prometheus
        image: prom/prometheus
        state: started
        pull: true
        restart_policy: always
        ports:
          - "8010:9090"
        volumes:
          - "{{ prometheus_filepath }}:/etc/prometheus/prometheus.yml"

    - name: Start Grafana Container
      community.docker.docker_container:
        name: Grafana
        image: grafana/grafana
        state: started
        pull: true
        restart_policy: always
        ports:
          - "8020:3000"
